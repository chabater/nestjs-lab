
當你使用 NestJS 開發 API 時，「**版本化路由（Versioned Routing）**」是一個非常實用的功能。它讓你可以在不影響舊版 API 的情況下，推出新版 API，方便你 **平滑升級**、**A/B 測試** 或 **分階段上線新功能**。

---

## 🔹 為什麼需要版本化？

當 API 對外提供服務時，隨著需求變動，你可能會：

* 修改回傳格式（DTO 結構變了）
* 變更驗證邏輯
* 改變參數
* 捨棄或新增欄位

如果你直接修改原本的 endpoint，會導致 **前端或第三方系統壞掉**。

有了版本化機制，你就能：

* `/v1/users` → 舊版本邏輯
* `/v2/users` → 新邏輯、新格式

雙版本**共存不衝突**，使用者可依照需要選擇版本。

---

## 🔧 如何在 NestJS 中使用版本化？

NestJS 支援幾種方式來做 API 版本化：

---

### ✅ 1. URI 路由版本（推薦給 REST API）

**實作方式：**

```ts
@Controller({
  path: 'users',
  version: '1', // 對應 /v1/users
})
export class UsersControllerV1 {
  @Get()
  getAllUsersV1() {
    return ['user1', 'user2'];
  }
}
```

```ts
@Controller({
  path: 'users',
  version: '2', // 對應 /v2/users
})
export class UsersControllerV2 {
  @Get()
  getAllUsersV2() {
    return ['new-user1', 'new-user2'];
  }
}
```

---

### ✅ 2. 預設路由設定版本識別（global prefix）

你需要在 `main.ts` 裡啟用版本化支援：

```ts
const app = await NestFactory.create(AppModule);
app.setGlobalPrefix('api', {
  // 支援版本化
  // 預設使用 URI-style versioning
  versioning: {
    type: VersioningType.URI,
  },
});
```

> 🔎 這樣你的路徑會變成 `/api/v1/users`、`/api/v2/users`

---

### ✅ 3. Header 版本化（適合 API Gateway 轉發）

```ts
app.enableVersioning({
  type: VersioningType.HEADER,
  header: 'x-api-version',
});
```

**呼叫方式：**

```http
GET /users
x-api-version: 1
```

這樣你可以根據 header 決定使用哪個 controller。

---

### ✅ 4. Media Type 版本化（較少用）

```ts
app.enableVersioning({
  type: VersioningType.MEDIA_TYPE,
  key: 'v',
});
```

**呼叫方式：**

```http
Accept: application/json;v=1
```

---

## 🧪 範例：同一個 route 支援多版本

你甚至可以在**同一個 controller** 中寫多個版本的方法：

```ts
@Controller('users')
export class UsersController {
  @Get()
  @Version('1')
  getV1() {
    return 'this is v1';
  }

  @Get()
  @Version('2')
  getV2() {
    return 'this is v2';
  }
}
```

---

## 🧠 小技巧與注意事項

| 類型                       | 優點                   | 缺點           |
| ------------------------ | -------------------- | ------------ |
| URI (`/v1/users`)        | 最清楚、最常見              | URL 結構比較長    |
| Header (`x-api-version`) | 清爽 URL、方便 gateway 控制 | 不直觀、不易 debug |
| Media Type               | RESTful purist 喜愛    | 較冷門、支援差      |
| Controller @Version()    | 靈活控制                 | 大型專案會混亂      |

---

## ✅ 結論

NestJS 的版本化支援是**企業級 API 維運的必備功能**，幫助你：

* 同時支援舊客戶與新規需求
* 安全上線新功能
* 平滑做向後不相容的變更

---

如果你告訴我你目前的 API 功能和未來升級需求，我可以幫你具體規劃版本化策略（ex: 哪些功能需要拆 v2、怎麼佈署、如何讓 Swagger 文件也支援多版本）。要嗎？




很好，讓我們用**實際範例**來說明「你應該怎麼實踐 NestJS 的版本化」。

---

## 🎯 你的情境假設（例子）

你有一個現有 API：

```http
GET /users
```

回傳：

```json
[
  { "id": 1, "name": "Amy" },
  { "id": 2, "name": "Bob" }
]
```

某一天你需要新增 email 欄位，或格式大改，不希望老客戶壞掉，因此你想推一個新版本。

---

## ✅ 實作步驟

---

### ✅ 第 1 步：在 `main.ts` 啟用版本控制

```ts
// main.ts
import { VersioningType } from '@nestjs/common';

const app = await NestFactory.create(AppModule);

app.setGlobalPrefix('api'); // 設定共用前綴 /api

app.enableVersioning({
  type: VersioningType.URI, // 使用 URI 版本控制，對應 /v1/, /v2/
});
```

這表示你將來的 API 是這樣的：

* `GET /api/v1/users` 👉 舊版
* `GET /api/v2/users` 👉 新版

---

### ✅ 第 2 步：建立 `UsersController` 的兩個版本

#### 📂 目錄結構建議：

```
src/
├── users/
│   ├── v1/
│   │   └── users.controller.ts
│   ├── v2/
│   │   └── users.controller.ts
```

#### `v1/users.controller.ts`

```ts
import { Controller, Get } from '@nestjs/common';

@Controller({ path: 'users', version: '1' })
export class UsersControllerV1 {
  @Get()
  getUsers() {
    return [
      { id: 1, name: 'Amy' },
      { id: 2, name: 'Bob' }
    ];
  }
}
```

#### `v2/users.controller.ts`

```ts
import { Controller, Get } from '@nestjs/common';

@Controller({ path: 'users', version: '2' })
export class UsersControllerV2 {
  @Get()
  getUsers() {
    return [
      { id: 1, name: 'Amy', email: 'amy@example.com' },
      { id: 2, name: 'Bob', email: 'bob@example.com' }
    ];
  }
}
```

---

### ✅ 第 3 步：在 Module 中註冊兩個版本的 Controller

```ts
// users/users.module.ts
import { Module } from '@nestjs/common';
import { UsersControllerV1 } from './v1/users.controller';
import { UsersControllerV2 } from './v2/users.controller';

@Module({
  controllers: [UsersControllerV1, UsersControllerV2],
})
export class UsersModule {}
```

---

### ✅ 第 4 步：整合到 AppModule

```ts
// app.module.ts
import { Module } from '@nestjs/common';
import { UsersModule } from './users/users.module';

@Module({
  imports: [UsersModule],
})
export class AppModule {}
```

---

### ✅ 結果測試

* **舊版：**

  ```
  curl http://localhost:3000/api/v1/users
  ```

  輸出：

  ```json
  [ { "id": 1, "name": "Amy" }, { "id": 2, "name": "Bob" } ]
  ```

* **新版：**

  ```
  curl http://localhost:3000/api/v2/users
  ```

  輸出：

  ```json
  [ { "id": 1, "name": "Amy", "email": "amy@example.com" }, { "id": 2, "name": "Bob", "email": "bob@example.com" } ]
  ```

---

## 📘 補充：Swagger 也可以支援版本

你也可以讓 Swagger 文件顯示每個版本（需要額外設定），如果你有需要我可以幫你設定 Swagger 多版本。

---

## ✅ 小結

| 目標           | 方式                         |
| ------------ | -------------------------- |
| 對同一資源支援多版本   | 建立多個 Controller，指定 version |
| 對外提供清晰路由     | 使用 URI 版本化 `/v1/`、`/v2/`   |
| 保護老客戶使用的 API | 不動原本 v1 controller，新增 v2   |

---

你只要照上面的步驟跟目錄拆法，就能輕鬆管理多個版本了。如果你希望我根據你現在的 controller 直接幫你重構成版本化結構，我也可以幫你做。你想試試嗎？
